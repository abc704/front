{"version":3,"sources":["axios.js","App.js","index.js"],"names":["instance","axios","create","baseURL","Styles","styled","div","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","React","useState","value","setValue","onChange","useAsyncDebounce","undefined","e","target","placeholder","style","fontSize","border","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","SelectColumnFilter","id","options","useMemo","Set","forEach","row","add","values","map","option","i","NumberRangeColumnFilter","min","max","Math","display","type","val","old","parseInt","width","marginRight","marginLeft","fuzzyTextFilterFn","rows","matchSorter","keys","Table","columns","data","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","useTable","useFilters","useGlobalFilter","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","visibleColumns","firstPageRows","slice","className","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","colSpan","textAlign","getRowProps","cells","cell","getCellProps","JSON","stringify","filters","autoRemove","App","Header","accessor","Data","setData","useEffect","a","get","req","console","log","fetchData","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1560f417.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance=axios.create({\r\n    baseURL:\"https://backin.herokuapp.com\"\r\n});\r\nexport default instance;","import React,{useEffect,useState} from \"react\";\nimport styled from \"styled-components\";\nimport {\n  useTable,\n  useFilters,\n  useGlobalFilter,\n  useAsyncDebounce\n} from \"react-table\";\n// A great library for fuzzy filtering/sorting items\nimport matchSorter from \"match-sorter\";\n// import Data from \"./Data\";\nimport axios from'./axios'\n// import makeData from \"./makeData\";\n// import \"./App.css\"\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-collapse: collapse;\n  margin: 25px 0;\n  font-size: 0.9rem;\n\n  \n\n  border-radius: 5px 5px 0 0;\n  \n  overflow: hidden;\n  box-shadow: 0 0 20px rgba(0,0,0,0.15);\n\n  thead tr{\n    background-color: #009879;\n    color: #ffffff;\n    text-align: left;\n    font-weight: bold;\n  }\n  tbody{\n    \n  \n  \n\n\n  }\n  tbody tr:nth-of-type(even){\n    background-color: #f3f3f3;\n  }\n  tbody tr:last-of-type{\n    border-bottom: 2px solid #009879;\n  }\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      padding: 12px 15px;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n    tbody tr{\n      border-bottom: 1 px solid #dddddd;\n    }\n  }\n`;\n\n\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter\n}) {\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = React.useState(globalFilter);\n  const onChange = useAsyncDebounce((value) => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n  \n\n  return (\n    <span>\n      Search:{\" \"}\n      <input\n        value={value || \"\"}\n        onChange={(e) => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`${count} records...`}\n        style={{\n          fontSize: \"1.1rem\",\n          border: \"0\"\n        }}\n      />\n    </span>\n  );\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter }\n}) {\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      value={filterValue || \"\"}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id }\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach((row) => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined);\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  );\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nfunction SliderColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id }\n}) {\n  // Calculate the min and max\n  // using the preFilteredRows\n\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={filterValue || min}\n        onChange={(e) => {\n          setFilter(parseInt(e.target.value, 10));\n        }}\n      />\n      <button onClick={() => setFilter(undefined)}>Off</button>\n    </>\n  );\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n  column: { filterValue = [], preFilteredRows, setFilter, id }\n}) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <div\n      style={{\n        display: \"flex\"\n      }}\n    >\n      <input\n        value={filterValue[0] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            val ? parseInt(val, 10) : undefined,\n            old[1]\n          ]);\n        }}\n        placeholder={`Min (${min})`}\n        style={{\n          width: \"70px\",\n          marginRight: \"0.5rem\"\n        }}\n      />\n      to\n      <input\n        value={filterValue[1] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            old[0],\n            val ? parseInt(val, 10) : undefined\n          ]);\n        }}\n        placeholder={`Max (${max})`}\n        style={{\n          width: \"70px\",\n          marginLeft: \"0.5rem\"\n        }}\n      />\n    </div>\n  );\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val;\n\n// Our table component\nfunction Table({ columns, data }) {\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id];\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true;\n        });\n      }\n    }),\n    []\n  );\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter\n    }),\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn, // Be sure to pass the defaultColumn option\n      filterTypes\n    },\n    useFilters, // useFilters!\n    useGlobalFilter // useGlobalFilter!\n  );\n\n  // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n  const firstPageRows = rows.slice(0, 15);\n\n  return (\n    <>\n      <table {...getTableProps()} className=\"table-content\">\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  {column.render(\"Header\")}\n                  {/* Render the columns filter UI */}\n                  <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n          <tr>\n            <th\n              colSpan={visibleColumns.length}\n              style={{\n                textAlign: \"left\"\n              }}\n            >\n              <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                globalFilter={state.globalFilter}\n                setGlobalFilter={setGlobalFilter}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {firstPageRows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <br />\n      <div>Showing the first 15 results of {rows.length} rows</div>\n      <div>\n        <pre>\n          <code>{JSON.stringify(state.filters, null, 2)}</code>\n        </pre>\n      </div>\n    </>\n  );\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter((row) => {\n    const rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = (val) => typeof val !== \"number\";\n\nfunction App() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"_id\",\n        accessor: \"_id\"\n      },\n      {\n        Header: \"intensity\",\n        accessor: \"intensity\",\n        Filter: NumberRangeColumnFilter,\n        filter: 'between',\n      },\n      {\n        Header: \"topic\",\n        accessor: \"topic\",\n        Filter: SelectColumnFilter,\n        filter: 'includes',\n      },\n      {\n        Header: \"region\",\n        accessor: \"region\",\n        Filter: SelectColumnFilter,\n        filter: 'includes',\n      },\n      {\n        Header: \"start_year\",\n        accessor: \"start_year\"\n      },\n      {\n        Header: \"country\",\n\n        accessor: \"country\",\n        Filter: SelectColumnFilter,\n        filter: 'includes',\n      }\n    ],\n    []\n  );\n  const [Data,setData]=useState([]);\n  useEffect(()=>{\n    async function fetchData(){\n        const req=await axios.get(\"/a\");\n        setData(req.data);\n        console.log(req.data)\n    }\n    fetchData();\n},[]);\n\n  // const data = React.useMemo(() => makeData(100000), [])\n\n  return (\n    <Styles>\n      <Table columns={columns} data={Data} />\n    </Styles>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}